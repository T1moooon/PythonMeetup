from django.conf import settings
from django.utils import timezone
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.filters.state import State, StatesGroup
from asgiref.sync import sync_to_async
# from aiogram.fsm.context import FSMContext

from .models import (
    Talk,
    CustomUser,
    get_user,
    create_user,
    get_program,
    get_talk,
    create_question,
    get_current_talks,
    start_talk,
    end_talk
)
from .keyboards import (
        start_keyboard,
        guest_keyboard,
        speaker_keyboard,
        get_talk_inline_keyboard,
        get_program_inline_keyboard
    )

router = Router()


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@router.message(F.text == "/start")
async def start_command(message):
    user_name = message.from_user.first_name
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–ø–∏–∫–µ—Ä–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' –µ—Å–ª–∏ –≤—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ, –ª–∏–±–æ '–í–æ–π—Ç–∏', –µ—Å–ª–∏ —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å",
        reply_markup=start_keyboard
    )


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@router.callback_query(F.data == "register")
async def register_user(callback):
    try:
        user, created = await create_user(
            telegram_id=callback.from_user.id,
            name=callback.from_user.full_name,
            role="guest"
        )
        if created:
            text = "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ—Å—Ç—å"
            markup = guest_keyboard
        else:
            if user.role == 'speaker':
                text = '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–∏–∫–µ—Ä'
                markup = speaker_keyboard
            else: 
                text = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ—Å—Ç—å"
                markup = guest_keyboard
                
        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        await callback.answer()


# –í–æ–π—Ç–∏
@router.callback_query(F.data == "login")
async def check_registration(callback):
    user = await get_user(callback.from_user.id, callback.from_user.full_name)
    if not user:
        await callback.message.edit_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=start_keyboard
        )
    elif user.role == 'guest':
        await callback.message.edit_text(
            "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –≥–æ—Å—Ç—å",
            reply_markup=guest_keyboard
        )
    elif user.role == 'speaker':
        await callback.message.edit_text(
            "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å–ø–∏–∫–µ—Ä",
            reply_markup=speaker_keyboard
        )
    await callback.answer()


def format_datetime(dt):
    return dt.strftime("%H:%M")


# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è
@router.callback_query(F.data == "event_program")
async def get_event_program(callback):
    event, talks = await get_program()

    if not event:
        await callback.message.edit_text("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await callback.answer()
        return

    start_date = event.start_date.strftime("%d.%m.%Y %H:%M")
    end_date = event.end_date.strftime("%d.%m.%Y %H:%M")

    event_description = (
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n\n"
    )

    if talks:
        await callback.message.edit_text(
            event_description,
            reply_markup=get_program_inline_keyboard(talks)
        )
        await callback.answer()
    else:
        await callback.message.edit_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤')
        await callback.answer()


# –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback):
    await callback.message.edit_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ', reply_markup=guest_keyboard)
    await callback.answer()


# –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–≥—Ä–∞–º–º–µ
@router.callback_query(F.data == "back_to_program")
async def back_to_program(callback):
    _, talks = await get_program()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥:",
        reply_markup=get_program_inline_keyboard(talks)
    )
    await callback.answer()


class QuestionStates(StatesGroup):
    waiting_for_question = State()


# –°–ø–∏—Å–æ–∫ –¥–æ–∫–ª–∞–¥–æ–≤
@router.callback_query(F.data.startswith("talk_"))
async def talk_details(callback, state):
    talk_id = int(callback.data.split("_")[1])
    talk = await get_talk(talk_id)
    
    if not talk:
        await callback.answer("–î–æ–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await state.update_data(current_talk_id=talk_id)

    response = (
        f"–î–æ–∫–ª–∞–¥: {talk.title}\n\n"
        f"üë®‚Äçüíª –°–ø–∏–∫–µ—Ä: {talk.speaker.name}\n"
        f"üïí –í—Ä–µ–º—è: {talk.start_time.strftime('%H:%M')} - {talk.end_time.strftime('%H:%M')}\n"
        # f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{talk.description}\n\n"
        f"‚ùì –•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É?"
    )
    await callback.message.edit_text(response, reply_markup=get_talk_inline_keyboard(talk))
    await callback.answer()


# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
@router.callback_query(F.data.startswith("ask_question_"))
async def ask_question(callback, state):
    talk_id = int(callback.data.split("_")[2])
    
    await state.update_data(talk_id=talk_id)
    await state.set_state(QuestionStates.waiting_for_question)
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É:")
    await callback.answer()


@router.message(QuestionStates.waiting_for_question)
async def wait_question(message, state):
    data = await state.get_data()
    talk_id = data.get('talk_id')

    if not talk_id:
        await message.answer("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥")
        return

    try:
        talk, user, question = await create_question(
            text=message.text,
            talk_id=talk_id,
            name=message.from_user.full_name, 
            telegram_id=message.from_user.id
        )
        await message.answer(
            f"‚úÖ –í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω\n\n"
            f"–î–æ–∫–ª–∞–¥: {talk.title}\n"
            f"–í–æ–ø—Ä–æ—Å: {question.text}\n"
            f"–û—Ç: {user.name}\n",
            reply_markup=guest_keyboard,
        )
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}")
    finally:
        await state.clear()


@router.callback_query(F.data == "start_talk")
async def handle_start_talk(callback):
    user = await get_user(callback.from_user.id, callback.from_user.full_name)
    if not user or user.role != 'speaker':
        await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–∏–∫–µ—Ä.")
        await callback.answer()
        return

    now = timezone.now()
    talk = await sync_to_async(Talk.objects.filter(
        speaker=user,
        start_time__lte=now,
        end_time__gte=now
    ).first)()

    if not talk:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç.")
        await callback.answer()
        return

    await start_talk(talk.id)
    await callback.message.edit_text(
        f"–í—ã –Ω–∞—á–∞–ª–∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {talk.title}\n"
        f"–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {now.strftime('%H:%M')}"
    )
    await callback.answer()


@router.callback_query(F.data == "end_talk")
async def handle_end_talk(callback):
    user = await get_user(callback.from_user.id, callback.from_user.full_name)
    if not user or user.role != 'speaker':
        await callback.message.edit_text("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–∏–∫–µ—Ä.")
        await callback.answer()
        return

    now = timezone.now()
    talk = await sync_to_async(Talk.objects.filter(
        speaker=user,
        actual_start_time__isnull=False,
        actual_end_time__isnull=True
    ).first)()

    if not talk:
        await callback.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤.")
        await callback.answer()
        return

    await end_talk(talk.id)
    await callback.message.edit_text(
        f"–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ: {talk.title}\n"
        f"–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è: {now.strftime('%H:%M')}"
    )
    await callback.answer()


@router.message(F.text == "/current_speakers")
async def current_speakers_command(message):
    talks = await get_current_talks()
    if not talks:
        await message.answer("–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤.")
        return

    response = "–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–ª–µ–¥—É—é—â–∏–µ –¥–æ–∫–ª–∞–¥—ã:\n\n"
    for talk in talks:
        response += (
            f"–î–æ–∫–ª–∞–¥: {talk.title}\n"
            f"–°–ø–∏–∫–µ—Ä: {talk.speaker.name}\n"
        )
    await message.answer(response)


async def main():
    bot = Bot(token=settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
