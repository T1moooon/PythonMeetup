from django.conf import settings
from aiogram import Bot, Dispatcher, Router, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties

from .models import get_user, create_user, get_program, get_talk
from .keyboards import (
        start_keyboard,
        guest_keyboard,
        speaker_keyboard,
        get_talk_inline_keyboard,
        get_program_inline_keyboard
    )

router = Router()


@router.message(F.text == "/start")
async def start_command(message):
    user_name = message.from_user.first_name
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n"
        "–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, —É–∑–Ω–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —Å–ø–∏–∫–µ—Ä–∞–º.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' –µ—Å–ª–∏ –≤—ã —Ç—É—Ç –≤–ø–µ—Ä–≤—ã–µ, –ª–∏–±–æ '–í–æ–π—Ç–∏', –µ—Å–ª–∏ —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å",
        reply_markup=start_keyboard
    )


@router.callback_query(F.data == "register")
async def register_user(callback):
    try:
        user, created = await create_user(
            telegram_id=callback.from_user.id,
            name=callback.from_user.full_name,
            role="guest"
        )
        if created:
            text = "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ—Å—Ç—å"
            markup = guest_keyboard
        else:
            if user.role == 'speaker':
                text = '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å–ø–∏–∫–µ—Ä'
                markup = speaker_keyboard
            else: 
                text = "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –≥–æ—Å—Ç—å"
                markup = guest_keyboard
                
        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()
    except Exception as e:
        await callback.message.edit_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {str(e)}")
        await callback.answer()


@router.callback_query(F.data == "login")
async def check_registration(callback):
    user = await get_user(callback.from_user.id, callback.from_user.full_name)
    if not user:
        await callback.message.edit_text(
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.",
            reply_markup=start_keyboard
        )
    elif user.role == 'guest':
        await callback.message.edit_text(
            "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –≥–æ—Å—Ç—å",
            reply_markup=guest_keyboard
        )
    elif user.role == 'speaker':
        await callback.message.edit_text(
            "–í—ã –≤–æ—à–ª–∏ –∫–∞–∫ —Å–ø–∏–∫–µ—Ä",
            reply_markup=speaker_keyboard
        )
    await callback.answer()


def format_datetime(dt):
    return dt.strftime("%H:%M")


@router.callback_query(F.data == "event_program")
async def get_event_program(callback):
    event, talks = await get_program()

    if not event:
        await callback.message.edit_text("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        await callback.answer()
        return

    start_date = event.start_date.strftime("%d.%m.%Y %H:%M")
    end_date = event.end_date.strftime("%d.%m.%Y %H:%M")

    event_description = (
        f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {event.title}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
        f"–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞: {start_date}\n"
        f"–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date}\n\n"
    )

    if talks:
        await callback.message.edit_text(
            event_description,
            reply_markup=get_program_inline_keyboard(talks)
        )
        await callback.answer()
    else:
        await callback.message.edit_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–∫–ª–∞–¥–æ–≤')
        await callback.answer()


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback):
    await callback.message.edit_text('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ', reply_markup=guest_keyboard)
    await callback.answer()


@router.callback_query(F.data == "back_to_program")
async def back_to_program(callback):
    _, talks = await get_program()
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫–ª–∞–¥:",
        reply_markup=get_program_inline_keyboard(talks)
    )
    await callback.answer()


@router.callback_query(F.data.startswith("talk_"))
async def talk_details(callback):
    talk_id = int(callback.data.split("_")[1])
    talk = await get_talk(talk_id)
    
    if not talk:
        await callback.answer("–î–æ–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    response = (
        f"üé§ {talk.title}\n\n"
        f"üë®‚Äçüíª –°–ø–∏–∫–µ—Ä: {talk.speaker.name}\n"
        f"üïí –í—Ä–µ–º—è: {talk.start_time.strftime('%H:%M')} - {talk.end_time.strftime('%H:%M')}\n"
        # f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{talk.description}\n\n"
        f"‚ùì –•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É?"
    )
    await callback.message.edit_text(response, reply_markup=get_talk_inline_keyboard(talk))
    await callback.answer()


# @router.message(F.text.startswith("–î–æ–∫–ª–∞–¥:"))
# async def talk_details(message):
#     talk_id = message.text.replace("–î–æ–∫–ª–∞–¥: ", "").strip()
#     talk = await get_talk(int(talk_id))
#     if talk:
#         response = (
#             f"üé§ {talk.title}\n\n"
#             f"üë®‚Äçüíª –°–ø–∏–∫–µ—Ä: {talk.speaker.name}\n"
#             f"üïí –í—Ä–µ–º—è: {talk.start_time.strftime('%H:%M')} - {talk.end_time.strftime('%H:%M')}\n"
#             f"üìç –ú–µ—Å—Ç–æ: {talk.location}\n\n"
#             f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{talk.description}\n\n"
#             f"‚ùì –•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–ø–∏–∫–µ—Ä—É?"
#         )
#         await message.answer(response, reply_markup=talk_keyboard)
#     else:
#         await message.answer("–î–æ–∫–ª–∞–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


async def main():
    bot = Bot(token=settings.BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())